name: Semantic Version
on:
  workflow_call:
    outputs:
      tag:
        description: 'Tag'
        value: ${{ jobs.build.outputs.tag }}

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ !contains(github.event.head_commit.message, '#autocommit') }}
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.semver.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: '0'

      - uses: paulhatch/semantic-version@v5.3.0
        id: semver
        with:
          # The prefix to use to identify tags
          tag_prefix: ''
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: '/BREAKING CHANGE?/'
          # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
          #major_regexp_flags: ""
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: '/feat?/'
          # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
          #minor_regexp_flags: ""
          # A string to determine the format of the version output
          version_format: '${major}.${minor}.${patch}-dev'
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: true
          # If bump_each_commit is also set to true, setting this value will cause the version to increment only if the pattern specified is matched.
          bump_each_commit_patch_pattern: ''
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: true
          # The output method used to generate list of users, 'csv' or 'json'.
          user_format_type: 'csv'
          # Prevents pre-v1.0.0 version from automatically incrementing the major version.
          # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
          enable_prerelease_mode: false
          # If enabled, diagnostic information will be added to the action output.
          debug: false
          # If true, the branch will be used to select the maximum version.
          version_from_branch: false

      - name: Create tag
        id: tag
        run: |
          git config user.name github-actions
          git config user.email git@wer1.ai
          git tag ${{ steps.semver.outputs.version }} -m "Tag from: ${{ github.sha }}"
          git push --tags
